import re

from dxbc.legacy.exprs import ValueExpr

coarse_regex = re.compile(r"l\(([^)]+)\)")
constructor_names = {
    int: "uint",
    hex: "uint",
    float: "float"
}

class ImmediateExpr(ValueExpr):
    def __init__(self, str_data, values, value_type):
        ValueExpr.__init__(self, str_data, values)
        self.value_type = value_type
        self.value_type_constr = constructor_names[self.value_type] + str(len(values))

    def __getitem__(self, index):
        return self.values[index]

    def mask(self, mask_values_out):
        if len(self.values) > len(mask_values_out):
            raise ValueError("Tried to mask a {}-component value with {}-component mask".format(len(self.values), len(mask_values_out)))
        return ImmediateExpr("<autogenerated>", [self.values[i] for i,v in enumerate(self.values) if mask_values_out[i]], self.value_type)

    @staticmethod
    def create(str_data):
        match = coarse_regex.match(str_data)
        if match is None:
            raise ValueError()
        immediate_contents = match.group(1)
        value_str_list = [x.strip() for x in immediate_contents.split(",")]
        value_list = []
        value_type = int
        for value_str in value_str_list:
            if '.' in value_str:
                value_type = float
                value_list.append(float(value_str))
            else:
                if value_str.startswith("0x"):
                    value_type = hex
                    value_list.append(int(value_str, 16))
                else:
                    value_type = int
                    value_list.append(int(value_str))
        return ImmediateExpr(str_data, value_list, value_type)

    def __str__(self):
        if len(self.values) > 1:
            return "{}({})".format(self.value_type_constr, ", ".join([str(self.value_type(x)) for x in self.values]))
        return str(self.value_type(self.values[0]))